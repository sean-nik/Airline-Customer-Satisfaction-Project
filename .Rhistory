# replace NA's with column means to preserve the rest of the data
df <- drop_na(raw_data)
# verify no NA's remain
any(is.na(df))
# convert to tibble and preserve data
df_nb <- as_tibble(df)
# convert to tibble
df <- as_tibble(df)
# remove destination/origin city
df <- df[,-18:-21]
# remove year of first flight
df <- df[,-6]
# select specific variables
df <- df %>% select("Satisfaction",
"Airline Status",
"No of Flights p.a.",
"Type of Travel",
"Shopping Amount at Airport",
"Class",
"Scheduled Departure Hour",
"Arrival Delay greater 5 Mins")
# convert char cols to factor
df$`Airline Status` <- as.factor(df$`Airline Status`)
df$`Type of Travel` <- as.factor(df$`Type of Travel`)
df$`Class` <- as.factor(df$`Class`)
df$`Arrival Delay greater 5 Mins` <- as.factor(df$`Arrival Delay greater 5 Mins`)
# verify changes
str(df)
## Model Prep
# build a randomized index
randIndex <- sample(1:dim(df)[1])
# check the summary
summary(randIndex)
# find the 2/3 cut point
cutPoint2_3 <- floor(2 * dim(df)[1]/3)
# split for the training set
trainData <- df[randIndex[1:cutPoint2_3],]
# split for the testing set
testData <- df[randIndex[(cutPoint2_3 + 1):dim(df)[1]],]
# create a new variable named "Satisfied" in train data set
# Satisfied = 0 if score is < 4
# Satisfied = 1 if score is => 4
trainData$Satisfied <- ifelse(trainData$Satisfaction < 4, 0, 1)
# do the same thing for test dataset
testData$Satisfied <- ifelse(testData$Satisfaction < 4, 0, 1)
# remove "Satisfaction" from train data
trainData <- trainData[,-1]
# remove "Satisfaction" from test data
testData <- testData[,-1]
# verify changes
tibble(trainData)
glimpse(trainData)
tibble(testData)
glimpse(testData)
# convert "Satisfied" in train data from numeric to factor
trainData$Satisfied <- as.factor(trainData$Satisfied)
# convert "Satisfied" in test data from numeric to factor
testData$Satisfied <- as.factor(testData$Satisfied)
time3 <- Sys.time()
# build a model using ksvm function,and use all other variables to predict
ksvmGood2 <- ksvm(Satisfied~., # set "Ozone" as target variable; "." means use all other variables to predict "Ozone"
data=trainData, # specify the data to use in the analysis
scaled = TRUE,
kernel="rbfdot", # kernel function that projects the low dimensional problem into higher dimensional space
kpar="automatic",# kpar refer to parameters that can be used to control the radial function kernel(rbfdot)
C=5 # C refers to "Cost of Constrains"
)
time4 <- Sys.time()
time4-time3
# check the model
ksvmGood2
summary(ksvmGood2)
# 2) Test the model
goodPred <- predict(ksvmGood2, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
tibble(results)
# check results
results
time1 <- Sys.time()
# build a model using ksvm function,and use all other variables to predict
ksvmGood1 <- ksvm(Satisfied~., # set "Ozone" as target variable; "." means use all other variables to predict "Ozone"
data=trainData # specify the data to use in the analysis
# scaled = TRUE,
# kernel="rbfdot", # kernel function that projects the low dimensional problem into higher dimensional space
# kpar="automatic",# kpar refer to parameters that can be used to control the radial function kernel(rbfdot)
# C=5 # C refers to "Cost of Constrains"
)
time2 <- Sys.time()
time2-time1
# check the model
ksvmGood1
summary(ksvmGood1)
# 2) Test the model
goodPred <- predict(ksvmGood1, # use model "svmGood" to predict
testData # use testData to do the test
)
ksvmGood2
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
# select sean's variables
df <- df %>% select("Satisfaction",
"Age",
"Gender",
"Airline Status",
"No of Flights p.a.",
"Type of Travel",
"Shopping Amount at Airport",
"Class",
"Scheduled Departure Hour",
"Arrival Delay greater 5 Mins")
df <- df_nb
# select sean's variables
df <- df %>% select("Satisfaction",
"Age",
"Gender",
"Airline Status",
"No of Flights p.a.",
"Type of Travel",
"Shopping Amount at Airport",
"Class",
"Scheduled Departure Hour",
"Arrival Delay greater 5 Mins")
# convert char cols to factor
df$`Gender` <- as.factor(df$`Gender`)
df$`Airline Status` <- as.factor(df$`Airline Status`)
df$`Type of Travel` <- as.factor(df$`Type of Travel`)
df$`Class` <- as.factor(df$`Class`)
df$`Arrival Delay greater 5 Mins` <- as.factor(df$`Arrival Delay greater 5 Mins`)
# verify changes
str(df)
## Model Prep
# build a randomized index
randIndex <- sample(1:dim(df)[1])
# check the summary
summary(randIndex)
# find the 2/3 cut point
cutPoint2_3 <- floor(2 * dim(df)[1]/3)
# split for the training set
trainData <- df[randIndex[1:cutPoint2_3],]
# split for the testing set
testData <- df[randIndex[(cutPoint2_3 + 1):dim(df)[1]],]
# create a new variable named "Satisfied" in train data set
# Satisfied = 0 if score is < 4
# Satisfied = 1 if score is => 4
trainData$Satisfied <- ifelse(trainData$Satisfaction < 4, 0, 1)
# do the same thing for test dataset
testData$Satisfied <- ifelse(testData$Satisfaction < 4, 0, 1)
# remove "Satisfaction" from train data
trainData <- trainData[,-1]
# remove "Satisfaction" from test data
testData <- testData[,-1]
# verify changes
tibble(trainData)
glimpse(trainData)
tibble(testData)
glimpse(testData)
# convert "Satisfied" in train data from numeric to factor
trainData$Satisfied <- as.factor(trainData$Satisfied)
# convert "Satisfied" in test data from numeric to factor
testData$Satisfied <- as.factor(testData$Satisfied)
time1 <- Sys.time()
# build a model using ksvm function,and use all other variables to predict
ksvmGood3 <- ksvm(Satisfied~., # set "Ozone" as target variable; "." means use all other variables to predict "Ozone"
data=trainData # specify the data to use in the analysis
# scaled = TRUE,
# kernel="rbfdot", # kernel function that projects the low dimensional problem into higher dimensional space
# kpar="automatic",# kpar refer to parameters that can be used to control the radial function kernel(rbfdot)
# C=5 # C refers to "Cost of Constrains"
)
time2 <- Sys.time()
time2-time1
time3 <- Sys.time()
# build a model using ksvm function,and use all other variables to predict
ksvmGood4 <- ksvm(Satisfied~., # set "Ozone" as target variable; "." means use all other variables to predict "Ozone"
data=trainData, # specify the data to use in the analysis
scaled = TRUE,
kernel="rbfdot", # kernel function that projects the low dimensional problem into higher dimensional space
kpar="automatic",# kpar refer to parameters that can be used to control the radial function kernel(rbfdot)
C=5 # C refers to "Cost of Constrains"
)
time4 <- Sys.time()
time4-time3
View(trainData)
# check the model
ksvmGood1
ksvmGood2
summary(ksvmGood1)
# 2) Test the model
goodPred <- predict(ksvmGood1, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
# 2) Test the model
goodPred <- predict(ksvmGood2, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
ksvmGood2
# select only demographics variables
df <- df %>% select("Satisfaction",
"Age",
"Gender")
df <- df_nb
# select only demographics variables
df <- df %>% select("Satisfaction",
"Age",
"Gender")
# convert char cols to factor
df$`Gender` <- as.factor(df$`Gender`)
df$`Airline Status` <- as.factor(df$`Airline Status`)
df$`Type of Travel` <- as.factor(df$`Type of Travel`)
df$`Class` <- as.factor(df$`Class`)
df$`Arrival Delay greater 5 Mins` <- as.factor(df$`Arrival Delay greater 5 Mins`)
# verify changes
str(df)
## Model Prep
# build a randomized index
randIndex <- sample(1:dim(df)[1])
# check the summary
summary(randIndex)
# find the 2/3 cut point
cutPoint2_3 <- floor(2 * dim(df)[1]/3)
# split for the training set
trainData <- df[randIndex[1:cutPoint2_3],]
# split for the testing set
testData <- df[randIndex[(cutPoint2_3 + 1):dim(df)[1]],]
# create a new variable named "Satisfied" in train data set
# Satisfied = 0 if score is < 4
# Satisfied = 1 if score is => 4
trainData$Satisfied <- ifelse(trainData$Satisfaction < 4, 0, 1)
# do the same thing for test dataset
testData$Satisfied <- ifelse(testData$Satisfaction < 4, 0, 1)
# remove "Satisfaction" from train data
trainData <- trainData[,-1]
# remove "Satisfaction" from test data
testData <- testData[,-1]
# verify changes
tibble(trainData)
glimpse(trainData)
tibble(testData)
glimpse(testData)
# convert "Satisfied" in train data from numeric to factor
trainData$Satisfied <- as.factor(trainData$Satisfied)
# convert "Satisfied" in test data from numeric to factor
testData$Satisfied <- as.factor(testData$Satisfied)
time1 <- Sys.time()
# build a model using ksvm function,and use all other variables to predict
ksvmGood3 <- ksvm(Satisfied~., # set "Ozone" as target variable; "." means use all other variables to predict "Ozone"
data=trainData # specify the data to use in the analysis
# scaled = TRUE,
# kernel="rbfdot", # kernel function that projects the low dimensional problem into higher dimensional space
# kpar="automatic",# kpar refer to parameters that can be used to control the radial function kernel(rbfdot)
# C=5 # C refers to "Cost of Constrains"
)
time2 <- Sys.time()
time2-time1
time3 <- Sys.time()
# build a model using ksvm function,and use all other variables to predict
ksvmGood4 <- ksvm(Satisfied~., # set "Ozone" as target variable; "." means use all other variables to predict "Ozone"
data=trainData, # specify the data to use in the analysis
scaled = TRUE,
kernel="rbfdot", # kernel function that projects the low dimensional problem into higher dimensional space
kpar="automatic",# kpar refer to parameters that can be used to control the radial function kernel(rbfdot)
C=5 # C refers to "Cost of Constrains"
)
time4 <- Sys.time()
time4-time3
# check the model
ksvmGood1
ksvmGood2
summary(ksvmGood1)
goodPred <- predict(ksvmGood1, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
goodPred <- predict(ksvmGood2, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
df <- df_nb
# select sean's variables
df <- df %>% select("Satisfaction",
"Age",
"Gender",
"Airline Status",
"No of Flights p.a.",
"Type of Travel",
"Shopping Amount at Airport",
"Class",
"Arrival Delay greater 5 Mins")
# convert char cols to factor
df$`Gender` <- as.factor(df$`Gender`)
df$`Airline Status` <- as.factor(df$`Airline Status`)
df$`Type of Travel` <- as.factor(df$`Type of Travel`)
df$`Class` <- as.factor(df$`Class`)
df$`Arrival Delay greater 5 Mins` <- as.factor(df$`Arrival Delay greater 5 Mins`)
# verify changes
str(df)
## Model Prep
# build a randomized index
randIndex <- sample(1:dim(df)[1])
# check the summary
summary(randIndex)
# find the 2/3 cut point
cutPoint2_3 <- floor(2 * dim(df)[1]/3)
# split for the training set
trainData <- df[randIndex[1:cutPoint2_3],]
# split for the testing set
testData <- df[randIndex[(cutPoint2_3 + 1):dim(df)[1]],]
# create a new variable named "Satisfied" in train data set
# Satisfied = 0 if score is < 4
# Satisfied = 1 if score is => 4
trainData$Satisfied <- ifelse(trainData$Satisfaction < 4, 0, 1)
# do the same thing for test dataset
testData$Satisfied <- ifelse(testData$Satisfaction < 4, 0, 1)
# remove "Satisfaction" from train data
trainData <- trainData[,-1]
# remove "Satisfaction" from test data
testData <- testData[,-1]
# verify changes
tibble(trainData)
glimpse(trainData)
tibble(testData)
glimpse(testData)
# convert "Satisfied" in train data from numeric to factor
trainData$Satisfied <- as.factor(trainData$Satisfied)
# convert "Satisfied" in test data from numeric to factor
testData$Satisfied <- as.factor(testData$Satisfied)
time1 <- Sys.time()
# build a model using ksvm function,and use all other variables to predict
ksvmGood3 <- ksvm(Satisfied~., # set "Ozone" as target variable; "." means use all other variables to predict "Ozone"
data=trainData # specify the data to use in the analysis
# scaled = TRUE,
# kernel="rbfdot", # kernel function that projects the low dimensional problem into higher dimensional space
# kpar="automatic",# kpar refer to parameters that can be used to control the radial function kernel(rbfdot)
# C=5 # C refers to "Cost of Constrains"
)
time2 <- Sys.time()
time2-time1
# check the model
ksvmGood1
# 2) Test the model
goodPred <- predict(ksvmGood1, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
# check the model
ksvmGood3
ksvmGood4
goodPred <- predict(ksvmGood3, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
goodPred <- predict(ksvmGood4, # use model "svmGood" to predict
testData # use testData to do the test
)
# verify first 10 predictions
tibble(goodPred)
# create a dataframe that contains the exact "goodOzone" value and the predicted "goodOzone"
compGood1 <- data.frame(testData$Satisfied, goodPred)
# change column names
colnames(compGood1) <- c("test","Pred")
# verify first 10 with changed column names
tibble(compGood1)
# Compute the percentage of correct cases
perc_ksvm <- length(which(compGood1$test == compGood1$Pred))/dim(compGood1)[1]
perc_ksvm
# Calculate the percentage of incorrect cases
perc_wrong_ksvm <- length(which(compGood1$test != compGood1$Pred))/dim(compGood1)[1]
perc_wrong_ksvm
# Confusion Matrix
results <- table(test = compGood1$test, pred = compGood1$Pred)
# check results
results
View(testData)
View(df_nb)

main="Air Quality Dataset - Ozone",
xlab="Ozone Level - parts per billion",
border="cyan",
col=pal(20),
breaks=20
)
# save the histogram to file
dev.copy(png,"ozone histogram.png")
# close the PNG device now that we are all done
dev.off()
# get info about the wind column
printVecInfo(noNaN_myAirQuality$Wind)
# customize the color ramp
pal <- colorRampPalette(c("cyan2", "purple4"))
# plot the customized histogram
hist(
noNaN_myAirQuality$Wind,
main="Air Quality Dataset - Wind",
xlab="Wind Speed - miles per hour",
border="lightgray",
col=pal(19),
breaks=20
)
# save the histogram to file
dev.copy(png,"wind histogram.png")
# close the PNG device now that we are all done
dev.off()
# get info about the temperature column
printVecInfo(noNaN_myAirQuality$Temp)
# set a custom palette for a gradient color as temperature increases
pal <- colorRampPalette(c("blue", "red", "darkred"))
# plot the customized histogram
hist(
noNaN_myAirQuality$Temp,
main="Air Quality Dataset - Temperature",
xlab="Temperature (F)",
border="lightgray",
col=pal(21),
breaks=20
)
# save the histogram to file
dev.copy(png,"temp histogram.png")
# close the PNG device now that we are all done
dev.off()
# get info about the solar radiation column
printVecInfo(noNaN_myAirQuality$Solar.R)
# set a custom palette for a gradient color as temperature increases
pal <- colorRampPalette(c("yellow", "orange4"))
# plot the customized histogram
hist(
noNaN_myAirQuality$Solar.R,
main="Air Quality Dataset - Solar Radiation",
xlab="Solar Radiance - Langleys (4000-7700 Angstroms)",
border="lightgray",
col=pal(21),
breaks=20
)
# save the histogram to file
dev.copy(png,"solrad histogram.png")
# close the PNG device now that we are all done
dev.off()
# run install.packages("readxl") if not already installed
require("readxl")
library("readxl")
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
setwd("/Documents/College/Masters/SyracuseUniversity/IST 687 - Applied Data Science/Final Project")
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
raw_data <- read_excel("data/SatisfactionSurvey.xlsx")
setwd("/Documents/College/Masters/SyracuseUniversity/IST 687 - Applied Data Science/Final Project/GitHub")
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
View(raw_data)
View(raw_data)
# include dependencies
library(dplyr)
library(ggplot2)
library(imputeTS)
library(tidyr)
library(reshape2)
library(grDevices)
library(readxl)
install.packages("naniar")
library(naniar)
library(visdat)
# read in the data
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
# take a look at the missing data
vis_miss(raw_data)
View(raw_data)
# take a look at the structure
str(raw_data)
# check for NA's
any(is.na(raw_data))
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
# check for column names where NA's exist
d <- colnames(raw_data)[apply(raw_data, 2, anyNA)]
# check for column names where NA's exist
NA_cols <- colnames(raw_data)[apply(raw_data, 2, anyNA)]
# include dependencies
library(dplyr)
library(ggplot2)
library(imputeTS)
library(tidyr)
library(reshape2)
library(grDevices)
library(readxl)
install.packages("naniar")
library(naniar)
library(visdat)
# read in the data
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
# take a look at the missing data
vis_miss(raw_data) # too large to visualize
# take a look at the structure
str(raw_data)
# check for NA's
any(is.na(raw_data))
# check for column names where NA's exist
NA_cols <- colnames(raw_data)[apply(raw_data, 2, anyNA)]
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
View(raw_data)
str(na_df)
na_df <- raw_data[-(1:21)]
str(na_df)
# check for NA's
any(is.na(raw_data))
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
View(na_df)
na_df <- raw_data[-(2:21)]
str(na_df)
na_df <- raw_data[-(2:22)]
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
View(na_df)
na_df <- raw_data[c(1, 23, 24, 26)]
str(na_df)
vis_miss(na_df)
# store columns with missing data in a new variable
na_test <- raw_data[c(1, 23, 24, 26)]
str(na_test)
# visualize how much data is missing
vis_miss(na_test)
#
gg_miss_upset(na_test)
gg_miss_upset(na_test, nsets = n_var_miss(na_test))
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test)
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test)
gg_miss_upset(na_test, nsets = n_var_miss(na_test))
# count number of missing elements from each variable
gg_miss_var(na_test)
#
gg_miss_var(na_test, facet = Satisfaction)
install.packages("ggcharts")
library(ggcharts)
# read in the data
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
# take a look at the missing data
vis_miss(raw_data) # too large to visualize
# take a look at the structure
str(raw_data)
# check for NA's
any(is.na(raw_data))
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
# store columns with missing data in a new variable
na_test <- raw_data[c(1, 23, 24, 26)]
str(na_test)
# visualize how much data is missing
vis_miss(na_test)
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test)
# count number of missing elements from each variable
gg_miss_var(na_test)
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction)
# include dependencies
library(dplyr)
library(ggplot2)
library(imputeTS)
library(tidyr)
library(reshape2)
library(grDevices)
library(readxl)
install.packages("naniar")
library(naniar)
library(visdat)
install.packages("ggcharts")
library(ggcharts)
# read in the data
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
# take a look at the missing data
vis_miss(raw_data) # too large to visualize
# take a look at the structure
str(raw_data)
# check for NA's
any(is.na(raw_data))
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
# store columns with missing data in a new variable
na_test <- raw_data[c(1, 23, 24, 26)]
str(na_test)
# visualize how much data is missing
vis_miss(na_test)
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test)
# count number of missing elements from each variable
gg_miss_var(na_test)
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction)
# include dependencies
library(dplyr)
library(ggplot2)
library(imputeTS)
library(tidyr)
library(reshape2)
library(grDevices)
library(readxl)
install.packages("naniar")
library(naniar)
library(visdat)
install.packages("ggcharts")
library(ggcharts)
# read in the data
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
# take a look at the missing data
vis_miss(raw_data) # too large to visualize
# take a look at the structure
str(raw_data)
# check for NA's
any(is.na(raw_data))
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
# store columns with missing data in a new variable
na_test <- raw_data[c(1, 23, 24, 26)]
str(na_test)
# visualize how much data is missing
vis_miss(na_test)
install.packages("naniar")
# include dependencies
library(dplyr)
library(ggplot2)
library(imputeTS)
library(tidyr)
library(reshape2)
library(grDevices)
library(readxl)
# install.packages("naniar")
library(naniar)
library(visdat)
# install.packages("ggcharts")
library(ggcharts)
# read in the data
raw_data <- read_excel("./data/SatisfactionSurvey.xlsx")
# take a look at the missing data
vis_miss(raw_data) # too large to visualize
# take a look at the structure
str(raw_data)
# check for NA's
any(is.na(raw_data))
# check for column names where NA's exist
colnames(raw_data)[apply(raw_data, 2, anyNA)]
# store columns with missing data in a new variable
na_test <- raw_data[c(1, 23, 24, 26)]
str(na_test)
# visualize how much data is missing
vis_miss(na_test)
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test)
# count number of missing elements from each variable
gg_miss_var(na_test)
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction)
# visualize how much data is missing
vis_miss(na_test) + theme_dark()
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test) + theme_dark()
# count number of missing elements from each variable
gg_miss_var(na_test) + theme_dark()
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction) + theme_dark()
# visualize how much data is missing
vis_miss(na_test) + theme_dark()
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test) + theme_dark()
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test)
# count number of missing elements from each variable
gg_miss_var(na_test) + theme_dark()
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction) + theme_dark()
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction) +
theme_dark() +
labs(title = "Number of NA's per Variable",
subtitle = "Grouped by Satisfaction Score")
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Number of NA's per Variable",
subtitle = "Grouped by Satisfaction Score")
# discover which ratings the most missing data is from
gg_miss_var(na_test, facet = Satisfaction) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
labs(title = "Number of NA's per Variable",
subtitle = "Grouped by Satisfaction Score")
gg_miss_var(na_test)
# count number of missing elements from each variable
gg_miss_var(na_test) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Number of NA's per Variable")
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test)   # does not work with theme_dark()
# find how many elements are missing from each and their relationships
gg_miss_upset(na_test) +   # does not work with theme_dark()
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Number of Rows that Share Missing Data")
# find how many elements are missing from each and their relationships
# does not work with theme_dark()
gg_miss_upset(na_test) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Number of Rows that Share Missing Data")
# find how many elements are missing from each and their relationships
# does not work with theme_dark()
gg_miss_upset(na_test) +
labs(title = "Number of Rows that Share Missing Data")
# visualize how much data is missing
vis_miss(na_test) + theme_dark()
vis_miss(na_test)
# replace NA's with column means to preserve the rest of the data
# replace NA's with the column mean
df <- data.frame(na_mean(raw_data))
View(df)
# verify no NA's remain
any(is.na(df))
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=Satisfaction, fill = cut_interval(Satisfaction, n = 50))) +
geom_histogram(show.legend = FALSE, bins = 25) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=as.factor(Satisfaction), fill = cut_interval(as.factor(Satisfaction), n = 50))) +
geom_histogram(show.legend = FALSE, bins = 25) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=as.factor(Satisfaction), fill = cut_interval(Satisfaction, n = 50))) +
geom_histogram(show.legend = FALSE, bins = 25) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=as.factor(Satisfaction), fill = cut_interval(Satisfaction, n = 50), stat = "count")) +
geom_histogram(show.legend = FALSE, bins = 25) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=as.factor(Satisfaction), stat = "count")) +
geom_histogram(show.legend = FALSE, bins = 25) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=as.factor(Satisfaction))) +
geom_histogram(show.legend = FALSE, bins = 25) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=as.factor(Satisfaction))) +
geom_histogram() +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=as.factor(Satisfaction))) +
geom_bar() +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=Satisfaction)) +
geom_bar() +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=Satisfaction)) +
geom_bar(bins = 9) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=Satisfaction)) +
geom_histogram() +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(x=Satisfaction)) +
geom_histogram(bins = 9) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Wind Histogram")
View(df)
str(df$Satisfaction)
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
geom_histogram(bins = 9) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
geom_histogram(binwidth = 0.5) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
geom_histogram(binwidth = 0.1) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
geom_histogram(binwidth = 0.5) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
str(df$Satisfaction)
# custom function to list descriptive stats for a variable
library("moments")
printVecInfo <- function(variable){
cat("printVecInfo results:","\n")
cat("mean:",mean(variable),"\n")
cat("median:",median(variable),"\n")
cat("min:",min(variable),"\n")
cat("max:",max(variable),"\n")
cat("standard deviation:",sd(variable),"\n")
quant <- quantile(variable,c(0.05,.95))
cat("5th to 95th percentile:",quant[1],"--",quant[2],"\n")
cat("skewness:",skewness(variable),"\n")
}
printVecInfo(df$Satisfaction)
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(~Airline.Name)
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(~Airline.Name, scales = "free")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(~Airline.Name, scales = "free_y")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(Class, scales = "free_y")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(df$Class, scales = "free_y")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(~df$Class)
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction)) +
facet_wrap(~df$Class) +
geom_histogram(binwidth = 0.5) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction)) +
theme_dark() +
facet_wrap(~df$Class) +
geom_histogram(binwidth = 0.5) +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status) +
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(~df$Class, scales = "free_y") +
geom_histogram(binwidth = 0.5) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(df$Satisfaction, fill = df$Airline.Status)) +
facet_wrap(~df$Class, scales = "free_y") +
geom_histogram(binwidth = 0.5) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires AirlineDataAnalysis.R to be run prior to this
ggplot(df,aes(Satisfaction, fill = Airline.Status)) +
facet_wrap(~df$Class, scales = "free_y") +
geom_histogram(binwidth = 0.5) +
theme_dark() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Customer Satisfaction Histogram")
# requires DescriptiveStats.R
printVecInfo(df$Satisfaction)
